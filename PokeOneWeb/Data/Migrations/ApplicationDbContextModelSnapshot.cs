// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokeOneWeb.Data;

namespace PokeOneWeb.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EffectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EffectShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PokeApiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Ability");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.BagCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BagCategory");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Build", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AbilityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EvDistributionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PokemonVarietyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("EvDistributionId");

                    b.HasIndex("PokemonVarietyId");

                    b.ToTable("Build");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.CurrencyAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CurrencyAmount");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ElementalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PokeApiName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ElementalType");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ElementalTypeRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("AttackEffectivity")
                        .HasColumnType("decimal(4,1)");

                    b.Property<int>("AttackingTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DefendingTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttackingTypeId");

                    b.HasIndex("DefendingTypeId");

                    b.ToTable("ElementalTypeRelation");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Event");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Evolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BasePokemonSpeciesId")
                        .HasColumnType("int");

                    b.Property<int>("BasePokemonVarietyId")
                        .HasColumnType("int");

                    b.Property<int>("BaseStage")
                        .HasColumnType("int");

                    b.Property<bool>("DoInclude")
                        .HasColumnType("bit");

                    b.Property<string>("EvolutionTrigger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EvolvedPokemonVarietyId")
                        .HasColumnType("int");

                    b.Property<int>("EvolvedStage")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReversible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BasePokemonSpeciesId");

                    b.HasIndex("BasePokemonVarietyId");

                    b.HasIndex("EvolvedPokemonVarietyId");

                    b.ToTable("Evolution");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.HuntingConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AbilityId")
                        .HasColumnType("int");

                    b.Property<int>("NatureId")
                        .HasColumnType("int");

                    b.Property<int>("PokemonVarietyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("NatureId");

                    b.HasIndex("PokemonVarietyId");

                    b.ToTable("HuntingConfiguration");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BagCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DoInclude")
                        .HasColumnType("bit");

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PokeApiName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PokeoneItemId")
                        .HasColumnType("int");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.Property<string>("SpriteName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BagCategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ResourceName")
                        .IsUnique();

                    b.ToTable("Item");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ItemOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BuildId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemOption");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ItemStatBoost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("StatBoostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("StatBoostId");

                    b.ToTable("ItemStatBoost");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ItemStatBoostPokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ItemStatBoostId")
                        .HasColumnType("int");

                    b.Property<int>("PokemonVarietyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemStatBoostId");

                    b.HasIndex("PokemonVarietyId");

                    b.ToTable("ItemStatBoostPokemon");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LearnableMove", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("MoveId")
                        .HasColumnType("int");

                    b.Property<int>("PokemonVarietyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MoveId");

                    b.HasIndex("PokemonVarietyId");

                    b.ToTable("LearnableMove");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LearnableMoveApi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int?>("BFBPPrice")
                        .HasColumnType("int");

                    b.Property<int?>("BigMushrooms")
                        .HasColumnType("int");

                    b.Property<int?>("BlueShardPrice")
                        .HasColumnType("int");

                    b.Property<string>("Generations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GreenShardPrice")
                        .HasColumnType("int");

                    b.Property<int?>("HeartScales")
                        .HasColumnType("int");

                    b.Property<string>("LearnMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LevelLearnedAt")
                        .HasColumnType("int");

                    b.Property<string>("MoveName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PWTBPPrice")
                        .HasColumnType("int");

                    b.Property<int?>("PokeDollarPrice")
                        .HasColumnType("int");

                    b.Property<int?>("PokeGoldPrice")
                        .HasColumnType("int");

                    b.Property<int>("PokemonSpeciesId")
                        .HasColumnType("int");

                    b.Property<string>("PokemonVarietyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RedShardPrice")
                        .HasColumnType("int");

                    b.Property<string>("RequiredItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TutorLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TutorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TutorPlacementDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YellowShardPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LearnableMoveApis");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LearnableMoveLearnMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("LearnableMoveId")
                        .HasColumnType("int");

                    b.Property<int?>("LevelLearnedAt")
                        .HasColumnType("int");

                    b.Property<int>("MoveLearnMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LearnableMoveId");

                    b.HasIndex("MoveLearnMethodId");

                    b.HasIndex("RequiredItemId");

                    b.ToTable("LearnableMoveLearnMethod");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LearnableMoveLearnMethodPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LearnableMoveLearnMethodId")
                        .HasColumnType("int");

                    b.Property<int>("PriceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LearnableMoveLearnMethodId");

                    b.HasIndex("PriceId");

                    b.ToTable("LearnableMoveLearnMethodPrice");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDiscoverable")
                        .HasColumnType("bit");

                    b.Property<int>("LocationGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationGroupId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Location");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LocationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.HasIndex("ResourceName")
                        .IsUnique();

                    b.ToTable("LocationGroup");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Move", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Accuracy")
                        .HasColumnType("int");

                    b.Property<int>("AttackPower")
                        .HasColumnType("int");

                    b.Property<int>("DamageClassId")
                        .HasColumnType("int");

                    b.Property<bool>("DoInclude")
                        .HasColumnType("bit");

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ElementalTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PokeApiName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerPoints")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DamageClassId");

                    b.HasIndex("ElementalTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ResourceName")
                        .IsUnique();

                    b.ToTable("Move");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.MoveDamageClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MoveDamageClass");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.MoveLearnMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MoveLearnMethod");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.MoveLearnMethodLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MoveLearnMethodId")
                        .HasColumnType("int");

                    b.Property<string>("NpcName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlacementDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("MoveLearnMethodId");

                    b.ToTable("MoveLearnMethodLocation");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.MoveOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BuildId")
                        .HasColumnType("int");

                    b.Property<int>("MoveId")
                        .HasColumnType("int");

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildId");

                    b.HasIndex("MoveId");

                    b.ToTable("MoveOption");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Nature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("StatBoostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StatBoostId");

                    b.ToTable("Nature");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.NatureOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BuildId")
                        .HasColumnType("int");

                    b.Property<int>("NatureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildId");

                    b.HasIndex("NatureId");

                    b.ToTable("NatureOption");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PlacedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlacementDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("LocationId");

                    b.ToTable("PlacedItem");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PokemonAvailability");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AvailabilityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PokeApiName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PokemonVarietyId")
                        .HasColumnType("int");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.Property<string>("SpriteName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PokemonVarietyId");

                    b.ToTable("PokemonForm");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonHeldItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("PokemonVarietyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PokemonVarietyId");

                    b.ToTable("PokemonHeldItem");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpecies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("DefaultVarietyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PokeApiName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PokedexNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefaultVarietyId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PokedexNumber")
                        .IsUnique();

                    b.ToTable("PokemonSpecies");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonVariety", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BaseStatsId")
                        .HasColumnType("int");

                    b.Property<string>("BulbapediaUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CatchRate")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultFormId")
                        .HasColumnType("int");

                    b.Property<bool>("DoInclude")
                        .HasColumnType("bit");

                    b.Property<int?>("EvYieldId")
                        .HasColumnType("int");

                    b.Property<int>("Generation")
                        .HasColumnType("int");

                    b.Property<int?>("HiddenAbilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFullyEvolved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMega")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PokeApiName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PokeOneCommunityUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PokemonDbUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PokemonShowDownUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PokemonSpeciesId")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryAbilityId")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PvpTierId")
                        .HasColumnType("int");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SecondaryAbilityId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SerebiiUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmogonUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseStatsId");

                    b.HasIndex("DefaultFormId");

                    b.HasIndex("EvYieldId");

                    b.HasIndex("HiddenAbilityId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PokemonSpeciesId");

                    b.HasIndex("PrimaryAbilityId");

                    b.HasIndex("PrimaryTypeId");

                    b.HasIndex("PvpTierId");

                    b.HasIndex("ResourceName")
                        .IsUnique();

                    b.HasIndex("SecondaryAbilityId");

                    b.HasIndex("SecondaryTypeId");

                    b.ToTable("PokemonVariety");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PvpTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PvpTier");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExperienceReward")
                        .HasColumnType("int");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MoneyReward")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("QuestTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("QuestTypeId");

                    b.ToTable("Quest");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.QuestItemReward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("QuestId");

                    b.ToTable("QuestItemReward");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.QuestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestType");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEventRegion")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Region");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Abbreviation")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Season");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.SeasonTimeOfDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EndHour")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("StartHour")
                        .HasColumnType("int");

                    b.Property<int?>("TimeOfDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TimeOfDayId");

                    b.ToTable("SeasonTimesOfDay");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ShopBoughtItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriceId")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PriceId");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopBoughtItem");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ShopSoldItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriceId")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PriceId");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopSoldItem");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Spawn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PokemonFormId")
                        .HasColumnType("int");

                    b.Property<int>("SpawnTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PokemonFormId");

                    b.HasIndex("SpawnTypeId");

                    b.ToTable("Spawn");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.SpawnOpportunity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("EncounterCount")
                        .HasColumnType("int");

                    b.Property<int>("PokemonSpawnId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("SpawnCommonality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SpawnProbability")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("TimeOfDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PokemonSpawnId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TimeOfDayId");

                    b.ToTable("SpawnOpportunity");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.SpawnType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInfinite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSyncable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SpawnType");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Stats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Attack")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("Defense")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("HitPoints")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("SpecialAttack")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("SpecialDefense")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("Speed")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.TimeOfDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Abbreviation")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TimeOfDay");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.TutorMove", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BFBPPrice")
                        .HasColumnType("int");

                    b.Property<int?>("BigMushrooms")
                        .HasColumnType("int");

                    b.Property<int?>("BlueShardPrice")
                        .HasColumnType("int");

                    b.Property<int?>("GreenShardPrice")
                        .HasColumnType("int");

                    b.Property<int?>("HeartScales")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoveName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PWTBPPrice")
                        .HasColumnType("int");

                    b.Property<string>("PlacementDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PokeDollarPrice")
                        .HasColumnType("int");

                    b.Property<int?>("PokeGoldPrice")
                        .HasColumnType("int");

                    b.Property<int?>("RedShardPrice")
                        .HasColumnType("int");

                    b.Property<string>("TutorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TutorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YellowShardPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TutorMoves");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Build", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.Stats", "EvDistribution")
                        .WithMany()
                        .HasForeignKey("EvDistributionId");

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonVariety", "PokemonVariety")
                        .WithMany("Builds")
                        .HasForeignKey("PokemonVarietyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("EvDistribution");

                    b.Navigation("PokemonVariety");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Currency", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.CurrencyAmount", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ElementalTypeRelation", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.ElementalType", "AttackingType")
                        .WithMany("AttackingDamageRelations")
                        .HasForeignKey("AttackingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.ElementalType", "DefendingType")
                        .WithMany("DefendingDamageRelations")
                        .HasForeignKey("DefendingTypeId")
                        .IsRequired();

                    b.Navigation("AttackingType");

                    b.Navigation("DefendingType");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Evolution", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpecies", "BasePokemonSpecies")
                        .WithMany("Evolutions")
                        .HasForeignKey("BasePokemonSpeciesId")
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonVariety", "BasePokemonVariety")
                        .WithMany()
                        .HasForeignKey("BasePokemonVarietyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonVariety", "EvolvedPokemonVariety")
                        .WithMany()
                        .HasForeignKey("EvolvedPokemonVarietyId")
                        .IsRequired();

                    b.Navigation("BasePokemonSpecies");

                    b.Navigation("BasePokemonVariety");

                    b.Navigation("EvolvedPokemonVariety");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.HuntingConfiguration", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.Nature", "Nature")
                        .WithMany()
                        .HasForeignKey("NatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonVariety", "PokemonVariety")
                        .WithMany("HuntingConfigurations")
                        .HasForeignKey("PokemonVarietyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Nature");

                    b.Navigation("PokemonVariety");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Item", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.BagCategory", "BagCategory")
                        .WithMany("Items")
                        .HasForeignKey("BagCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BagCategory");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ItemOption", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Build", "Build")
                        .WithMany("Item")
                        .HasForeignKey("BuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Build");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ItemStatBoost", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.Stats", "StatBoost")
                        .WithMany()
                        .HasForeignKey("StatBoostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("StatBoost");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ItemStatBoostPokemon", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.ItemStatBoost", "ItemStatBoost")
                        .WithMany("RequiredPokemon")
                        .HasForeignKey("ItemStatBoostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonVariety", "PokemonVariety")
                        .WithMany()
                        .HasForeignKey("PokemonVarietyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemStatBoost");

                    b.Navigation("PokemonVariety");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LearnableMove", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Move", "Move")
                        .WithMany()
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonVariety", "PokemonVariety")
                        .WithMany("LearnableMoves")
                        .HasForeignKey("PokemonVarietyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Move");

                    b.Navigation("PokemonVariety");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LearnableMoveLearnMethod", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.LearnableMove", "LearnableMove")
                        .WithMany("LearnMethods")
                        .HasForeignKey("LearnableMoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.MoveLearnMethod", "MoveLearnMethod")
                        .WithMany()
                        .HasForeignKey("MoveLearnMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.Item", "RequiredItem")
                        .WithMany()
                        .HasForeignKey("RequiredItemId");

                    b.Navigation("LearnableMove");

                    b.Navigation("MoveLearnMethod");

                    b.Navigation("RequiredItem");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LearnableMoveLearnMethodPrice", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.LearnableMoveLearnMethod", "LearnableMoveLearnMethod")
                        .WithMany("Price")
                        .HasForeignKey("LearnableMoveLearnMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.CurrencyAmount", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearnableMoveLearnMethod");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Location", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.LocationGroup", "LocationGroup")
                        .WithMany("Locations")
                        .HasForeignKey("LocationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocationGroup");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LocationGroup", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Region", "Region")
                        .WithMany("LocationGroups")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Move", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.MoveDamageClass", "DamageClass")
                        .WithMany()
                        .HasForeignKey("DamageClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.ElementalType", "ElementalType")
                        .WithMany("Moves")
                        .HasForeignKey("ElementalTypeId");

                    b.Navigation("DamageClass");

                    b.Navigation("ElementalType");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.MoveLearnMethodLocation", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.MoveLearnMethod", "MoveLearnMethod")
                        .WithMany("Locations")
                        .HasForeignKey("MoveLearnMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("MoveLearnMethod");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.MoveOption", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Build", "Build")
                        .WithMany("Moves")
                        .HasForeignKey("BuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.Move", "Move")
                        .WithMany()
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Build");

                    b.Navigation("Move");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Nature", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Stats", "StatBoost")
                        .WithMany()
                        .HasForeignKey("StatBoostId");

                    b.Navigation("StatBoost");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.NatureOption", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Build", "Build")
                        .WithMany("Nature")
                        .HasForeignKey("BuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.Nature", "Nature")
                        .WithMany()
                        .HasForeignKey("NatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Build");

                    b.Navigation("Nature");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PlacedItem", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("PlacedItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.Location", "Location")
                        .WithMany("PlacedItems")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonForm", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.PokemonAvailability", "Availability")
                        .WithMany()
                        .HasForeignKey("AvailabilityId");

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonVariety", "PokemonVariety")
                        .WithMany("Forms")
                        .HasForeignKey("PokemonVarietyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Availability");

                    b.Navigation("PokemonVariety");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonHeldItem", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("HeldItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonVariety", "PokemonVariety")
                        .WithMany("HeldItems")
                        .HasForeignKey("PokemonVarietyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("PokemonVariety");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpecies", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.PokemonVariety", "DefaultVariety")
                        .WithMany()
                        .HasForeignKey("DefaultVarietyId");

                    b.Navigation("DefaultVariety");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonVariety", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Stats", "BaseStats")
                        .WithMany()
                        .HasForeignKey("BaseStatsId");

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonForm", "DefaultForm")
                        .WithMany()
                        .HasForeignKey("DefaultFormId");

                    b.HasOne("PokeOneWeb.Data.Entities.Stats", "EvYield")
                        .WithMany()
                        .HasForeignKey("EvYieldId");

                    b.HasOne("PokeOneWeb.Data.Entities.Ability", "HiddenAbility")
                        .WithMany("PokemonVarietiesAsHiddenAbility")
                        .HasForeignKey("HiddenAbilityId");

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpecies", "PokemonSpecies")
                        .WithMany("Varieties")
                        .HasForeignKey("PokemonSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.Ability", "PrimaryAbility")
                        .WithMany("PokemonVarietiesAsPrimaryAbility")
                        .HasForeignKey("PrimaryAbilityId");

                    b.HasOne("PokeOneWeb.Data.Entities.ElementalType", "PrimaryType")
                        .WithMany()
                        .HasForeignKey("PrimaryTypeId")
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.PvpTier", "PvpTier")
                        .WithMany()
                        .HasForeignKey("PvpTierId");

                    b.HasOne("PokeOneWeb.Data.Entities.Ability", "SecondaryAbility")
                        .WithMany("PokemonVarietiesAsSecondaryAbility")
                        .HasForeignKey("SecondaryAbilityId");

                    b.HasOne("PokeOneWeb.Data.Entities.ElementalType", "SecondaryType")
                        .WithMany()
                        .HasForeignKey("SecondaryTypeId");

                    b.Navigation("BaseStats");

                    b.Navigation("DefaultForm");

                    b.Navigation("EvYield");

                    b.Navigation("HiddenAbility");

                    b.Navigation("PokemonSpecies");

                    b.Navigation("PrimaryAbility");

                    b.Navigation("PrimaryType");

                    b.Navigation("PvpTier");

                    b.Navigation("SecondaryAbility");

                    b.Navigation("SecondaryType");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Quest", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("PokeOneWeb.Data.Entities.QuestType", "QuestType")
                        .WithMany("Quests")
                        .HasForeignKey("QuestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("QuestType");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.QuestItemReward", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("QuestRewardItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.Quest", "Quest")
                        .WithMany("ItemRewards")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Region", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.SeasonTimeOfDay", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId");

                    b.HasOne("PokeOneWeb.Data.Entities.TimeOfDay", "TimeOfDay")
                        .WithMany("SeasonTimes")
                        .HasForeignKey("TimeOfDayId");

                    b.Navigation("Season");

                    b.Navigation("TimeOfDay");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Shop", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ShopBoughtItem", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("BoughtItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.CurrencyAmount", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.Shop", "Shop")
                        .WithMany("BoughtItems")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Price");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ShopSoldItem", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("SoldItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.CurrencyAmount", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.Shop", "Shop")
                        .WithMany("SoldItems")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Price");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Spawn", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Location", "Location")
                        .WithMany("PokemonSpawns")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonForm", "PokemonForm")
                        .WithMany("PokemonSpawns")
                        .HasForeignKey("PokemonFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.SpawnType", "SpawnType")
                        .WithMany()
                        .HasForeignKey("SpawnTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("PokemonForm");

                    b.Navigation("SpawnType");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.SpawnOpportunity", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Spawn", "PokemonSpawn")
                        .WithMany("SpawnOpportunities")
                        .HasForeignKey("PokemonSpawnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeOneWeb.Data.Entities.TimeOfDay", "TimeOfDay")
                        .WithMany()
                        .HasForeignKey("TimeOfDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokemonSpawn");

                    b.Navigation("Season");

                    b.Navigation("TimeOfDay");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Ability", b =>
                {
                    b.Navigation("PokemonVarietiesAsHiddenAbility");

                    b.Navigation("PokemonVarietiesAsPrimaryAbility");

                    b.Navigation("PokemonVarietiesAsSecondaryAbility");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.BagCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Build", b =>
                {
                    b.Navigation("Item");

                    b.Navigation("Moves");

                    b.Navigation("Nature");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ElementalType", b =>
                {
                    b.Navigation("AttackingDamageRelations");

                    b.Navigation("DefendingDamageRelations");

                    b.Navigation("Moves");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Item", b =>
                {
                    b.Navigation("BoughtItems");

                    b.Navigation("HeldItems");

                    b.Navigation("PlacedItems");

                    b.Navigation("QuestRewardItems");

                    b.Navigation("SoldItems");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ItemStatBoost", b =>
                {
                    b.Navigation("RequiredPokemon");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LearnableMove", b =>
                {
                    b.Navigation("LearnMethods");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LearnableMoveLearnMethod", b =>
                {
                    b.Navigation("Price");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Location", b =>
                {
                    b.Navigation("PlacedItems");

                    b.Navigation("PokemonSpawns");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LocationGroup", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.MoveLearnMethod", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonForm", b =>
                {
                    b.Navigation("PokemonSpawns");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpecies", b =>
                {
                    b.Navigation("Evolutions");

                    b.Navigation("Varieties");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonVariety", b =>
                {
                    b.Navigation("Builds");

                    b.Navigation("Forms");

                    b.Navigation("HeldItems");

                    b.Navigation("HuntingConfigurations");

                    b.Navigation("LearnableMoves");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Quest", b =>
                {
                    b.Navigation("ItemRewards");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.QuestType", b =>
                {
                    b.Navigation("Quests");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Region", b =>
                {
                    b.Navigation("LocationGroups");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Shop", b =>
                {
                    b.Navigation("BoughtItems");

                    b.Navigation("SoldItems");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Spawn", b =>
                {
                    b.Navigation("SpawnOpportunities");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.TimeOfDay", b =>
                {
                    b.Navigation("SeasonTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
